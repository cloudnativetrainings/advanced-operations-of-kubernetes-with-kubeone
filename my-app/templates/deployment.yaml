apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  labels:
    app: my-app
spec:
  replicas: {{.Values.replicas}}
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      terminationGracePeriodSeconds: 0
      containers:
        - name: blue
          image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          tty: true
          stdin: true
          env:
            - name: WORKER_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /liveness/
              port: 8080
          readinessProbe:
            httpGet:
              path: /readiness/
              port: 8080
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: configuration
              mountPath: /app/training-application.conf
              subPath: training-application.conf
            {{- if .Values.persistMetaInfo }}
            - name: persistence
              mountPath: /app/data/
            {{- end }}
      volumes:
        - name: configuration
          configMap:
            name: my-app
        {{- if .Values.persistMetaInfo }}
        - name: persistence
          persistentVolumeClaim:
            claimName: training-application-pvc
        {{- end }}
